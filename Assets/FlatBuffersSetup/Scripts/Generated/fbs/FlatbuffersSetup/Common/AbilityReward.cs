// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersSetup.Common
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AbilityReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AbilityReward GetRootAsAbilityReward(ByteBuffer _bb) { return GetRootAsAbilityReward(_bb, new AbilityReward()); }
  public static AbilityReward GetRootAsAbilityReward(ByteBuffer _bb, AbilityReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbilityReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string AbilityId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAbilityIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAbilityIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAbilityIdArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<FlatBuffersSetup.Common.AbilityReward> CreateAbilityReward(FlatBufferBuilder builder,
      StringOffset ability_idOffset = default(StringOffset)) {
    builder.StartTable(1);
    AbilityReward.AddAbilityId(builder, ability_idOffset);
    return AbilityReward.EndAbilityReward(builder);
  }

  public static void StartAbilityReward(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddAbilityId(FlatBufferBuilder builder, StringOffset abilityIdOffset) { builder.AddOffset(0, abilityIdOffset.Value, 0); }
  public static Offset<FlatBuffersSetup.Common.AbilityReward> EndAbilityReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersSetup.Common.AbilityReward>(o);
  }
  public AbilityRewardT UnPack() {
    var _o = new AbilityRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AbilityRewardT _o) {
    _o.AbilityId = this.AbilityId;
  }
  public static Offset<FlatBuffersSetup.Common.AbilityReward> Pack(FlatBufferBuilder builder, AbilityRewardT _o) {
    if (_o == null) return default(Offset<FlatBuffersSetup.Common.AbilityReward>);
    var _ability_id = _o.AbilityId == null ? default(StringOffset) : builder.CreateString(_o.AbilityId);
    return CreateAbilityReward(
      builder,
      _ability_id);
  }
}

public class AbilityRewardT
{
  public string AbilityId { get; set; }

  public AbilityRewardT() {
    this.AbilityId = null;
  }
}


static public class AbilityRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*AbilityId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
