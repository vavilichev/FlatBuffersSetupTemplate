// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersSetup.Common
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ResourceReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ResourceReward GetRootAsResourceReward(ByteBuffer _bb) { return GetRootAsResourceReward(_bb, new ResourceReward()); }
  public static ResourceReward GetRootAsResourceReward(ByteBuffer _bb, ResourceReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResourceReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ResourceType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetResourceTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetResourceTypeArray() { return __p.__vector_as_array<byte>(4); }
  public int ResourceAmount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FlatBuffersSetup.Common.ResourceReward> CreateResourceReward(FlatBufferBuilder builder,
      StringOffset resource_typeOffset = default(StringOffset),
      int resource_amount = 0) {
    builder.StartTable(2);
    ResourceReward.AddResourceAmount(builder, resource_amount);
    ResourceReward.AddResourceType(builder, resource_typeOffset);
    return ResourceReward.EndResourceReward(builder);
  }

  public static void StartResourceReward(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddResourceType(FlatBufferBuilder builder, StringOffset resourceTypeOffset) { builder.AddOffset(0, resourceTypeOffset.Value, 0); }
  public static void AddResourceAmount(FlatBufferBuilder builder, int resourceAmount) { builder.AddInt(1, resourceAmount, 0); }
  public static Offset<FlatBuffersSetup.Common.ResourceReward> EndResourceReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersSetup.Common.ResourceReward>(o);
  }
  public ResourceRewardT UnPack() {
    var _o = new ResourceRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ResourceRewardT _o) {
    _o.ResourceType = this.ResourceType;
    _o.ResourceAmount = this.ResourceAmount;
  }
  public static Offset<FlatBuffersSetup.Common.ResourceReward> Pack(FlatBufferBuilder builder, ResourceRewardT _o) {
    if (_o == null) return default(Offset<FlatBuffersSetup.Common.ResourceReward>);
    var _resource_type = _o.ResourceType == null ? default(StringOffset) : builder.CreateString(_o.ResourceType);
    return CreateResourceReward(
      builder,
      _resource_type,
      _o.ResourceAmount);
  }
}

public class ResourceRewardT
{
  public string ResourceType { get; set; }
  public int ResourceAmount { get; set; }

  public ResourceRewardT() {
    this.ResourceType = null;
    this.ResourceAmount = 0;
  }
}


static public class ResourceRewardVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ResourceType*/, false)
      && verifier.VerifyField(tablePos, 6 /*ResourceAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
