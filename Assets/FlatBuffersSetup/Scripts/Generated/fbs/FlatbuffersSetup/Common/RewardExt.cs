// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersSetup.Common
{

public enum RewardExt : byte
{
  NONE = 0,
  ResourceReward = 1,
  AbilityReward = 2,
};

public class RewardExtUnion {
  public RewardExt Type { get; set; }
  public object Value { get; set; }

  public RewardExtUnion() {
    this.Type = RewardExt.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public FlatBuffersSetup.Common.ResourceRewardT AsResourceReward() { return this.As<FlatBuffersSetup.Common.ResourceRewardT>(); }
  public static RewardExtUnion FromResourceReward(FlatBuffersSetup.Common.ResourceRewardT _resourcereward) { return new RewardExtUnion{ Type = RewardExt.ResourceReward, Value = _resourcereward }; }
  public FlatBuffersSetup.Common.AbilityRewardT AsAbilityReward() { return this.As<FlatBuffersSetup.Common.AbilityRewardT>(); }
  public static RewardExtUnion FromAbilityReward(FlatBuffersSetup.Common.AbilityRewardT _abilityreward) { return new RewardExtUnion{ Type = RewardExt.AbilityReward, Value = _abilityreward }; }

  public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, RewardExtUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case RewardExt.ResourceReward: return FlatBuffersSetup.Common.ResourceReward.Pack(builder, _o.AsResourceReward()).Value;
      case RewardExt.AbilityReward: return FlatBuffersSetup.Common.AbilityReward.Pack(builder, _o.AsAbilityReward()).Value;
    }
  }
}



static public class RewardExtVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((RewardExt)typeId)
    {
      case RewardExt.ResourceReward:
        result = FlatBuffersSetup.Common.ResourceRewardVerify.Verify(verifier, tablePos);
        break;
      case RewardExt.AbilityReward:
        result = FlatBuffersSetup.Common.AbilityRewardVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}


}
