// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersSetup
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GameSettings GetRootAsGameSettings(ByteBuffer _bb) { return GetRootAsGameSettings(_bb, new GameSettings()); }
  public static GameSettings GetRootAsGameSettings(ByteBuffer _bb, GameSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyGameSettings(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, GameSettingsVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FlatBuffersSetup.Gameplay.BuildingSettings? Buildings(int j) { int o = __p.__offset(4); return o != 0 ? (FlatBuffersSetup.Gameplay.BuildingSettings?)(new FlatBuffersSetup.Gameplay.BuildingSettings()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BuildingsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FlatBuffersSetup.Gameplay.ChestSettings? Chests(int j) { int o = __p.__offset(6); return o != 0 ? (FlatBuffersSetup.Gameplay.ChestSettings?)(new FlatBuffersSetup.Gameplay.ChestSettings()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChestsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatBuffersSetup.GameSettings> CreateGameSettings(FlatBufferBuilder builder,
      VectorOffset buildingsOffset = default(VectorOffset),
      VectorOffset chestsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    GameSettings.AddChests(builder, chestsOffset);
    GameSettings.AddBuildings(builder, buildingsOffset);
    return GameSettings.EndGameSettings(builder);
  }

  public static void StartGameSettings(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBuildings(FlatBufferBuilder builder, VectorOffset buildingsOffset) { builder.AddOffset(0, buildingsOffset.Value, 0); }
  public static VectorOffset CreateBuildingsVector(FlatBufferBuilder builder, Offset<FlatBuffersSetup.Gameplay.BuildingSettings>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuildingsVectorBlock(FlatBufferBuilder builder, Offset<FlatBuffersSetup.Gameplay.BuildingSettings>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuildingsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatBuffersSetup.Gameplay.BuildingSettings>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuildingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatBuffersSetup.Gameplay.BuildingSettings>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuildingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChests(FlatBufferBuilder builder, VectorOffset chestsOffset) { builder.AddOffset(1, chestsOffset.Value, 0); }
  public static VectorOffset CreateChestsVector(FlatBufferBuilder builder, Offset<FlatBuffersSetup.Gameplay.ChestSettings>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChestsVectorBlock(FlatBufferBuilder builder, Offset<FlatBuffersSetup.Gameplay.ChestSettings>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChestsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatBuffersSetup.Gameplay.ChestSettings>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChestsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatBuffersSetup.Gameplay.ChestSettings>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChestsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBuffersSetup.GameSettings> EndGameSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersSetup.GameSettings>(o);
  }
  public static void FinishGameSettingsBuffer(FlatBufferBuilder builder, Offset<FlatBuffersSetup.GameSettings> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGameSettingsBuffer(FlatBufferBuilder builder, Offset<FlatBuffersSetup.GameSettings> offset) { builder.FinishSizePrefixed(offset.Value); }
  public GameSettingsT UnPack() {
    var _o = new GameSettingsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GameSettingsT _o) {
    _o.Buildings = new List<FlatBuffersSetup.Gameplay.BuildingSettingsT>();
    for (var _j = 0; _j < this.BuildingsLength; ++_j) {_o.Buildings.Add(this.Buildings(_j).HasValue ? this.Buildings(_j).Value.UnPack() : null);}
    _o.Chests = new List<FlatBuffersSetup.Gameplay.ChestSettingsT>();
    for (var _j = 0; _j < this.ChestsLength; ++_j) {_o.Chests.Add(this.Chests(_j).HasValue ? this.Chests(_j).Value.UnPack() : null);}
  }
  public static Offset<FlatBuffersSetup.GameSettings> Pack(FlatBufferBuilder builder, GameSettingsT _o) {
    if (_o == null) return default(Offset<FlatBuffersSetup.GameSettings>);
    var _buildings = default(VectorOffset);
    if (_o.Buildings != null) {
      var __buildings = new Offset<FlatBuffersSetup.Gameplay.BuildingSettings>[_o.Buildings.Count];
      for (var _j = 0; _j < __buildings.Length; ++_j) { __buildings[_j] = FlatBuffersSetup.Gameplay.BuildingSettings.Pack(builder, _o.Buildings[_j]); }
      _buildings = CreateBuildingsVector(builder, __buildings);
    }
    var _chests = default(VectorOffset);
    if (_o.Chests != null) {
      var __chests = new Offset<FlatBuffersSetup.Gameplay.ChestSettings>[_o.Chests.Count];
      for (var _j = 0; _j < __chests.Length; ++_j) { __chests[_j] = FlatBuffersSetup.Gameplay.ChestSettings.Pack(builder, _o.Chests[_j]); }
      _chests = CreateChestsVector(builder, __chests);
    }
    return CreateGameSettings(
      builder,
      _buildings,
      _chests);
  }
}

public class GameSettingsT
{
  public List<FlatBuffersSetup.Gameplay.BuildingSettingsT> Buildings { get; set; }
  public List<FlatBuffersSetup.Gameplay.ChestSettingsT> Chests { get; set; }

  public GameSettingsT() {
    this.Buildings = null;
    this.Chests = null;
  }
  public static GameSettingsT DeserializeFromBinary(byte[] fbBuffer) {
    return GameSettings.GetRootAsGameSettings(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GameSettings.FinishGameSettingsBuffer(fbb, GameSettings.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class GameSettingsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Buildings*/, FlatBuffersSetup.Gameplay.BuildingSettingsVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Chests*/, FlatBuffersSetup.Gameplay.ChestSettingsVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
