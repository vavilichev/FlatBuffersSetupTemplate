// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffersSetup.Gameplay
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ChestSettings : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ChestSettings GetRootAsChestSettings(ByteBuffer _bb) { return GetRootAsChestSettings(_bb, new ChestSettings()); }
  public static ChestSettings GetRootAsChestSettings(ByteBuffer _bb, ChestSettings obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ChestSettings __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Rarity { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRarityBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRarityBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRarityArray() { return __p.__vector_as_array<byte>(6); }
  public FlatBuffersSetup.Common.RewardSettings? Rewards(int j) { int o = __p.__offset(8); return o != 0 ? (FlatBuffersSetup.Common.RewardSettings?)(new FlatBuffersSetup.Common.RewardSettings()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RewardsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlatBuffersSetup.Gameplay.ChestSettings> CreateChestSettings(FlatBufferBuilder builder,
      int id = 0,
      StringOffset rarityOffset = default(StringOffset),
      VectorOffset rewardsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ChestSettings.AddRewards(builder, rewardsOffset);
    ChestSettings.AddRarity(builder, rarityOffset);
    ChestSettings.AddId(builder, id);
    return ChestSettings.EndChestSettings(builder);
  }

  public static void StartChestSettings(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddRarity(FlatBufferBuilder builder, StringOffset rarityOffset) { builder.AddOffset(1, rarityOffset.Value, 0); }
  public static void AddRewards(FlatBufferBuilder builder, VectorOffset rewardsOffset) { builder.AddOffset(2, rewardsOffset.Value, 0); }
  public static VectorOffset CreateRewardsVector(FlatBufferBuilder builder, Offset<FlatBuffersSetup.Common.RewardSettings>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, Offset<FlatBuffersSetup.Common.RewardSettings>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FlatBuffersSetup.Common.RewardSettings>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FlatBuffersSetup.Common.RewardSettings>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlatBuffersSetup.Gameplay.ChestSettings> EndChestSettings(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBuffersSetup.Gameplay.ChestSettings>(o);
  }
  public ChestSettingsT UnPack() {
    var _o = new ChestSettingsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ChestSettingsT _o) {
    _o.Id = this.Id;
    _o.Rarity = this.Rarity;
    _o.Rewards = new List<FlatBuffersSetup.Common.RewardSettingsT>();
    for (var _j = 0; _j < this.RewardsLength; ++_j) {_o.Rewards.Add(this.Rewards(_j).HasValue ? this.Rewards(_j).Value.UnPack() : null);}
  }
  public static Offset<FlatBuffersSetup.Gameplay.ChestSettings> Pack(FlatBufferBuilder builder, ChestSettingsT _o) {
    if (_o == null) return default(Offset<FlatBuffersSetup.Gameplay.ChestSettings>);
    var _rarity = _o.Rarity == null ? default(StringOffset) : builder.CreateString(_o.Rarity);
    var _rewards = default(VectorOffset);
    if (_o.Rewards != null) {
      var __rewards = new Offset<FlatBuffersSetup.Common.RewardSettings>[_o.Rewards.Count];
      for (var _j = 0; _j < __rewards.Length; ++_j) { __rewards[_j] = FlatBuffersSetup.Common.RewardSettings.Pack(builder, _o.Rewards[_j]); }
      _rewards = CreateRewardsVector(builder, __rewards);
    }
    return CreateChestSettings(
      builder,
      _o.Id,
      _rarity,
      _rewards);
  }
}

public class ChestSettingsT
{
  public int Id { get; set; }
  public string Rarity { get; set; }
  public List<FlatBuffersSetup.Common.RewardSettingsT> Rewards { get; set; }

  public ChestSettingsT() {
    this.Id = 0;
    this.Rarity = null;
    this.Rewards = null;
  }
}


static public class ChestSettingsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Rarity*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Rewards*/, FlatBuffersSetup.Common.RewardSettingsVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
